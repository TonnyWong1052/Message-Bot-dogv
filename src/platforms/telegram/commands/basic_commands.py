import time
import platform
import os
import logging
import random
from telethon import events
from telethon.errors.rpcerrorlist import FloodWaitError
from .base import CommandHandler
from ..commands.utils import MessageHelper
from services.unwire_fetch import fetch_unwire_news, fetch_unwire_recent

logger = logging.getLogger("telegram_basic_commands")

class BasicCommandHandler(CommandHandler):
    """
    Basic command handler class for simple Telegram commands
    """
    
    def __init__(self, client, llm_client=None):
        """
        Initialize basic command handler
        
        Args:
            client: Telegram client
            llm_client: LLM client instance (optional)
        """
        super().__init__(client, llm_client)
    
    async def register_handlers(self):
        """
        Register all basic command handlers
        """
        self.client.add_event_handler(
            self.ping_handler,
            events.NewMessage(pattern=r'^/ping$')
        )
        
        self.client.add_event_handler(
            self.hi_dog_handler,
            events.NewMessage(pattern=r'^/hi_dog$')
        )
        
        self.client.add_event_handler(
            self.test_handler,
            events.NewMessage(pattern=r'^/test$')
        )
        
        self.client.add_event_handler(
            self.env_handler,
            events.NewMessage(pattern=r'^/env$')
        )
        
        self.client.add_event_handler(
            self.dotenv_handler,
            events.NewMessage(pattern=r'^/\.env$')
        )
        
        # Modified pattern to support /unwire with optional date parameter
        self.client.add_event_handler(
            self.unwire_handler,
            events.NewMessage(pattern=r'^/unwire(?:\s+\d{4}-\d{2}-\d{2})?$')
        )
        
        logger.info("Basic command handlers registered")
    
    async def ping_handler(self, event):
        """Handle /ping command"""
        try:
            # Get current timestamp
            start_time = time.time()
            
            # Reply with initial message
            message = await event.reply("Pinging...")
            
            # Calculate latency
            latency = round((time.time() - start_time) * 1000, 2)
            
            # Determine service type and location
            service_type = "Local"
            location = "Unknown"
            
            # Check if running in Azure (you can add more detailed checks)
            if os.getenv('AZURE_DEPLOYMENT') or os.getenv('AZURE_WEBSITE_NAME'):
                service_type = "Azure"
            
            # Create compact response format
            response = f"{latency}ms\nService: {service_type}\nLocation: {location}"
            
            # Update message with response
            await message.edit(response)
        except FloodWaitError as e:
            await self.handle_flood_wait_error(event, e)
        except Exception as e:
            await self.handle_error(event, e)
    
    async def hi_dog_handler(self, event):
        """Handle /hi_dog command"""
        try:
            # Dog ASCII arts
            dog_arts = [
                """
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢Ä‚°§‚†û‚†ã‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†≥‚¢Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚£†‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢†‚†á‚†Ä‚¢∞‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚°Ñ‚†Ä‚¢∏‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä    Sit, Stay,'N Play
‚¢∏‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∞‚£∂‚°Ä‚†Ä‚†Ä‚†Ä‚¢†‚£∂‚°Ä‚†Ä‚†Ä‚°á‚†Ä‚¢∏‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†à‚¢ß‚£Ä‚¢∏‚°Ñ‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚¢†‚°á‚£†‚°û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†â‚†ô‚£á‚†Ä‚†Ç‚†Ä‚†Ä‚¢∂‚£∂‚£∂‚†Ä‚†Ñ‚†Ä‚†Ä‚£æ‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚°Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†û‚†ì‚†§‚£§‚£Ä‚£Ä‚£†‚£§‚†¥‚†ö‚†â‚†ë‚†≤‚¢§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚£Ä‚£†‚£Ä‚£Ä‚£†‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†∞‚°á‚†Ä‚†à‚†Å‚†Ä‚†à‚°ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢¶‚†Ä‚†Ä‚¢†‚†ñ‚°Ü
‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†ë‚¢¶‚°Ä‚†Ä‚£†‚†û‚†Å‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£∑‚†û‚†ã‚¢†‚†á
‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚°û‚†Å‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚¢Ä‚°¥‚†ã‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°û‚†â‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†≥‚†¶‚†§‚†¥‚†õ‚†à‚†ì‚†§‚†§‚†û‚†Å‚†â‚†õ‚†í‚†ö‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                """,
                """
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£†‚£§‚£Ñ‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†∂‚†ã‚†â‚†ô‚¢ø‚£ø‚£ø‚£ø‚£Ñ‚†à‚¢ª‚£∂‚†§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚†ã‚†â‚†ô‚¢ß‚°Ä‚¢ø‚°Ñ‚¢∏‚£∑‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£æ‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚£∂‚£∂‚°Ñ‚¢∏‚°á‚¢∏‚°ü‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°è‚£â‚¢ª‚£ø‚†ü‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ø‚†í‚†ª‚£ß‚¢∏‚°á‚£ø‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚¢ª‚°Ä‚†ª‚°Ñ‚†Ä‚£∂‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚£Ä‚°Ä‚†Ä‚†à‚†ª‚£ß‚¢ª‚£Ñ‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∑‚†∏‚£∑‚£Ñ‚£π‚£Ü‚£ø‚†ã‚†Å‚†Ä‚††‚£ø‚£ø‚£ü‚†Ä‚†Ä‚¢Ä‚°ø‚†ø‚†ø‚†É‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£Ñ‚†Ä‚†à‚†â‚†õ‚¢∑‚¢∞‚†Ü‚†Ä‚†Ä‚†Ä‚†õ‚£ø‚†ó‚£∫‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†õ‚¢ª‚£∂‚£Ñ‚£∏‚†¶‚†§‚†§‚†§‚†æ‚†•‚†ö‚†π‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†ª‚£ø‚†ã‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢à‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚£†‚¢ñ‚£¢‚†Ä‚¢Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚†Å‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ß‚†Ä‚†Ä‚†Ä‚†Ä
‚£æ‚£ø‚†ã‚£†‚£æ‚†õ‚†Ä‚£¥‚°ø‚†õ‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä
‚†à‚†Å‚£∞‚°ø‚†Å‚¢Ä‚£æ‚†ü‚†Å‚†Ä‚¢ª‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ò‚¢ø‚°Ü‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚£ø‚°á‚†Ä‚£º‚†É‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†á‚†Ä‚†Ä‚†Ä‚£†‚£ß‚†à‚¢∑‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚£ø‚£á‚¢∞‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚°ü‚†Ä‚†Ä‚†Ä‚£†‚£¥‚£ø‚†É‚†Ä‚†ò‚°Ü‚†Ä‚†Ä
‚†Ä‚†Ä‚¢π‚£ø‚£æ‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚¢π‚£¶‚£¥‚£æ‚£ø‚¢ø‚°ø‚†Ä‚†Ä‚†Ä‚£ß‚†Ä‚†Ä
‚†Ä‚†Ä‚†à‚¢ª‚£ø‚£ø‚£Ñ‚£º‚£ø‚£∂‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚¢Ä‚£∏‚£ø‚°ø‚†ü‚†Å‚¢∏‚†á‚†Ä‚¢§‚°æ‚†ø‚£¶‚°Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚°ü‚†â‚†â‚†â‚†Å‚†à‚†ª‚°è‚†Ä‚†∞‚†∂‚†õ‚†ã‚¢π‚°Ñ‚†Ä‚†Ä‚†∏‚°Ñ‚¢Ä‚†Ä‚¢∏‚°î‚£Ü‚¢≥
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚†§‚†º‚†§‚†º‚†∑‚†û‚¢∑‚£Ä‚°Ä‚†Ä‚¢∞‚†Ä‚£¶‚£∑‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†í‚†ö‚†≥‚†û‚†ã
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†õ‚†â‚†õ‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä""",
                """
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°Ä ·∂ª ùóì ê∞Å .·êü ‚£º‚£ø‚°ó‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£†‚†ü‚†Ä‚†ò‚†∑‚†∂‚†∂‚†∂‚†æ‚†â‚¢≥‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ß‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚£∞‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£§‚£§‚£§‚£§‚£§‚£ø‚¢ø‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£∑‚°¥‚†∂‚£¶
‚†Ä‚†Ä‚¢±‚°Ä‚†Ä‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†É‚†Ä‚¢†‚°ü‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£†‚£§‚†ø‚†û‚†õ‚†ã
‚£†‚†æ‚†ã‚†ô‚£∂‚£§‚£§‚£§‚£§‚£§‚£Ä‚£†‚£§‚£æ‚£ø‚†¥‚†∂‚†ö‚†ã‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†õ‚†í‚†õ‚†â‚†â‚†Ä‚†Ä‚†Ä‚£¥‚†ü‚¢É‚°¥‚†õ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
""",
                """‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£†‚£§‚£§‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†π‚£ø‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚¢º‚£ø‚†Ä‚¢ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚£æ‚£∑‚†Ä‚†Ä‚¢ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†à‚†ã‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†ô‚†ã‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢Ä‚£Ä‚£Ä‚£Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£∑‚£¶‚£§‚£¥‚£ø‚£ø‚£ø‚£ø‚£§‚†§‚¢§‚£§‚°Ñ
‚†à‚†â‚†â‚¢â‚£ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä
‚†ê‚†ö‚†ã‚†â‚¢Ä‚£¨‚°ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£•‚£Ä‚°Ä‚†à‚†Ä‚†à‚†õ
‚†Ä‚†Ä‚†¥‚†ö‚†â‚†Ä‚†Ä‚†Ä‚†â‚†õ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†¢‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä""",
                """
                             ÔºøÔºø
„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄüå∏Ôºû„ÄÄ„ÄÄ„Éï
„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ| „ÄÄ_„ÄÄ _ l
„ÄÄ „ÄÄ„ÄÄ„ÄÄÔºè` „ÉüÔºøx„Éé
„ÄÄ„ÄÄ „ÄÄ /„ÄÄ„ÄÄ„ÄÄ „ÄÄ |
„ÄÄ„ÄÄ„ÄÄ /„ÄÄ „ÉΩ„ÄÄ„ÄÄ Ôæâ
„ÄÄ „ÄÄ ‚îÇ„ÄÄ„ÄÄ|„ÄÄ|„ÄÄ|
„ÄÄÔºèÔø£|„ÄÄ„ÄÄ |„ÄÄ|„ÄÄ|
„ÄÄ| (Ôø£„ÉΩÔºø_„ÉΩ_)__)
„ÄÄÔºº‰∫å„Å§"""
            ]
            
            # Choose a random dog art
            dog_art = random.choice(dog_arts)
            
            await event.reply(f"Woof! Hello there! üê∂\n{dog_art}")
        except FloodWaitError as e:
            await self.handle_flood_wait_error(event, e)
        except Exception as e:
            await self.handle_error(event, e)
    
    async def test_handler(self, event):
        """Handle /test command"""
        try:
            await event.reply("Bot is running! This is a test response.")
        except FloodWaitError as e:
            await self.handle_flood_wait_error(event, e)
        except Exception as e:
            await self.handle_error(event, e)
    
    async def env_handler(self, event):
        """Handle /env command"""
        try:
            # Get environment information
            environment = os.getenv('ENVIRONMENT', 'Not set')
            
            # Format response
            response = f"Environment: {environment.upper()}\n\n"
            
            await event.reply(response)
        except FloodWaitError as e:
            await self.handle_flood_wait_error(event, e)
        except Exception as e:
            await self.handle_error(event, e)
    
    async def dotenv_handler(self, event):
        """Handle /.env command - calls the same handler as /env"""
        await self.env_handler(event)
    
    async def unwire_handler(self, event):
        """
        Handle /unwire command - Fetch news from Unwire.hk
        
        Usage:
        /unwire - Get today's news
        /unwire 2025-04-15 - Get news from specific date
        """
        try:
            # Get the command text and split it
            command_text = event.message.text.split()
            
            # If no date specified, get today's news
            if len(command_text) == 1:
                news_content = fetch_unwire_news()
            else:
                # Try to get news for specified date
                date_str = command_text[1]
                # Validate date format (YYYY-MM-DD)
                try:
                    from datetime import datetime
                    datetime.strptime(date_str, '%Y-%m-%d')
                    news_content = fetch_unwire_news(date=date_str)
                except ValueError:
                    error_msg = "Invalid date format. Please use YYYY-MM-DD format (e.g., 2025-04-19)."
                    await event.respond(error_msg)
                    return
            
            # Send the news content
            await event.respond(news_content)
            
        except Exception as e:
            logger.error(f"Error in unwire_handler: {e}")
            error_msg = "Sorry, I couldn't fetch the news. Please try again later."
            await event.respond(error_msg) 